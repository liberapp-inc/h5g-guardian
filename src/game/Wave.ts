// Liberapp 2019 - Tahiti Katagai
// 配置　障害物生成

class Wave extends GameObject{

    static I:Wave = null;
    static readonly speedMin = 1/(60*10);
    static readonly speedMax = 1/(60*3);
    random:Random;
    scroll:number = 0;
    period:number = 0;
    speedY:number;
    wave:number = 0;
    map:number[] = null;
    mapIndex:number = 0;

    constructor() {
        super();

        Wave.I = this;
        this.random = new Random();
        this.speedY = Util.height * Wave.speedMin;

        this.map = this.maps[ this.random.i( 0, this.maps.length ) ];
        this.mapIndex = this.map.length / BLOCK_IN_W - 1;
    }

    update() {
        if( Player.I.state == Player.I.stateNone ) return;

        const hardRate = Util.clamp( this.scroll / (4 * Util.height), 0, 1 );
        this.speedY = Util.height * Util.lerp( Wave.speedMin,  Wave.speedMax, hardRate );
        this.scroll += this.speedY;
        this.period += this.speedY;

        const length = Util.height / BLOCK_IN_H;
        this.wave = Math.floor( this.scroll / length );
        if( this.period >= length ){
            this.period -= length;

            const bw = BLOCK_SIZE_PER_W * Util.width;
            const bh = bw;//BLOCK_SIZE_PER_H * Util.height;
            for( let i=0 ; i<BLOCK_IN_W ; i++ ){
                const data = this.map[this.mapIndex * BLOCK_IN_W + i];
                const type = data & 0xf;
                if( type != 0 ){
                    const x = (0.5 + i) * bw;
                    const y = -2.0 * bh;
                    const scale = ((data >>  4) & 0xf) * 0.5 + 1;
                    const angle = ((data >>  8) & 0xf) * (Math.PI*2/16);
                    const move  = ((data >> 12) & 0xf) * (Math.PI*2/16);   // 真下０度、時計回り0~15
                    const speed = ((data >> 16) & 0xf) * (bw*2/15);
                    const vx = Math.sin(move) * -speed;
                    const vy = Math.cos(move) *  speed;
                    switch( type ){
                        case 1: Obstacle.newBox( x, y, scale, angle, vx, vy );      break;
                        case 2: Obstacle.newBar( x, y, scale, angle, vx, vy );      break;
                        case 3: Obstacle.newLong( x, y, scale, angle, vx, vy );     break;
                        case 4: Obstacle.newBall( x, y, scale,        vx, vy );     break;
                        case 5: Obstacle.newCross( x, y, scale, angle, vx, vy );    break;
                    }

                }
            }

            if( (--this.mapIndex) < 0 ){
                this.map = this.maps[ this.random.i( 0, this.maps.length ) ];
                this.mapIndex = this.map.length / BLOCK_IN_W - 1;
                this.period -= length * Util.lerp( 8, 1, hardRate );
            }
        }
    }

    // 0x Speed,Move,Angle,Scale,Type

    map0:number[] = [
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00001, 0x00001, 0x00000, 0x00000,
        0x00000, 0x00001, 0x00000, 0x00000, 0x00001, 0x00000,
        0x00001, 0x00000, 0x00000, 0x00000, 0x00000, 0x00001,
    ];
    map1:number[] = [
        0x00001, 0x00000, 0x00001, 0x00001, 0x00000, 0x00001,
        0x00000, 0x00002, 0x00000, 0x00000, 0x00002, 0x00000,
        0x00001, 0x00000, 0x00001, 0x00001, 0x00000, 0x00001,
        0x00000, 0x00002, 0x00000, 0x00000, 0x00002, 0x00000,
    ];
    map2:number[] = [
        0x00000, 0x00001, 0x00001, 0x00001, 0x00001, 0x00000,
        0x00000, 0x00003, 0x00000, 0x00000, 0x00003, 0x00000,
        0x00000, 0x00002, 0x00000, 0x00000, 0x00002, 0x00000,
        0x00000, 0x00000, 0x00001, 0x00001, 0x00000, 0x00000,
    ];
    map3:number[] = [
        0x00000, 0x00003, 0x00000, 0x00000, 0x00003, 0x00000,
    ];
    map4:number[] = [
        0x00000, 0x00004, 0x00004, 0x00004, 0x00004, 0x00000,
        0x00000, 0x00004, 0x00004, 0x00004, 0x00004, 0x00000,
        0x00000, 0x00004, 0x00004, 0x00004, 0x00004, 0x00000,
        0x00000, 0x00004, 0x00004, 0x00004, 0x00004, 0x00000,
    ];
    map5:number[] = [
        0x2c004, 0x4c004, 0x00000, 0x00000, 0x44004, 0x24004,
        0x1e004, 0x00000, 0x00000, 0x00000, 0x00000, 0x12004,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    map6:number[] = [
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00103, 0x00000, 0x00000, 0x00f03, 0x00000,
        0x00000, 0x00003, 0x00000, 0x00000, 0x00003, 0x00000,
        0x00000, 0x00f03, 0x00000, 0x00000, 0x00103, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    map7:number[] = [
        0x00000, 0x80001, 0x00000, 0x00000, 0x80001, 0x00000,
        0xc0001, 0x00000, 0x00000, 0x00000, 0x00000, 0xc0001,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    map8:number[] = [
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00403, 0x00000, 0x00000, 0x00000, 0x00000, 0x00403,
        0x00000, 0x00000, 0x00401, 0x00401, 0x00000, 0x00000,
        0x00000, 0x00403, 0x00000, 0x00000, 0x00403, 0x00000,
        0x00403, 0x00000, 0x00000, 0x00000, 0x00000, 0x00403,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    map9:number[] = [
        0x00000, 0x00201, 0x00000, 0x00201, 0x00000, 0x00201,
        0x00201, 0x00000, 0x00201, 0x00000, 0x00201, 0x00000,
        0x00000, 0x00201, 0x00000, 0x00201, 0x00000, 0x00201,
        0x00201, 0x00000, 0x00201, 0x00000, 0x00201, 0x00000,
    ];
    mapA:number[] = [
        0x00000, 0x00005, 0x00000, 0x00000, 0x00005, 0x00000,
        0x00005, 0x00005, 0x00005, 0x00005, 0x00005, 0x00005,
        0x00000, 0x00005, 0x00000, 0x00000, 0x00005, 0x00000,
    ];
    mapB:number[] = [
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00e45, 0x00000, 0x00000, 0x00245, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    mapC:number[] = [
        0x00001, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00001, 0x00001, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00001, 0x00001, 0x00001, 0x00000, 0x00000, 0x00000,
        0x00001, 0x00001, 0x00001, 0x00001, 0x00000, 0x00000,
        0x00001, 0x00001, 0x00001, 0x00000, 0x00000, 0x00000,
        0x00001, 0x00001, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00001, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];
    mapD:number[] = [
        0x00002, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00002, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00002, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00002, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00002, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00002,
    ];
    mapE:number[] = [
        0x00000, 0x00000, 0x00003, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00003, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00003, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00003, 0x00000, 0x00000,
    ];
    mapF:number[] = [
        0x4c005, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x44005,
        0x4c005, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x44005,
        0x4c005, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x44005,
    ];
    mapG:number[] = [
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x000c4, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
        0x00000, 0x00000, 0x00000, 0x00000, 0x00000, 0x00000,
    ];





    maps:number[][] = [this.map0, this.map1, this.map2, this.map3, this.map4, this.map5, this.map6, this.map7, this.map8, this.map9, this.mapA, this.mapB, this.mapC, this.mapD, this.mapE, this.mapF, this.mapG  ];
}

